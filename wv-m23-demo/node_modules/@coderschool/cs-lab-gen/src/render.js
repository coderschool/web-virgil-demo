const fs = require("fs-extra");
const walk = require("ignore-walk");
const path = require("path");
const fm = require("front-matter");

const map = (f) => (arr) => arr.map(f);
const filter = (f) => (arr) => arr.filter(f);

async function getFiles(dir, ignoreFiles = []) {
  const files = walk
    .sync({ path: dir, ignoreFiles })
    .map((f) => path.join(dir, f))
    .sort((a, b) => a.localeCompare(b));
  return files;
}

function renderSteps(file, text) {
  const regex = /(?:#{1,6}) (step .*)\n(((?!# .).*\n)*)/gi;
  const matches = [...text.matchAll(regex)];
  const result = matches.reduce((acc, cur) => {
    const [title, content] = cur.slice(1);
    if (title) {
      const actionRegex =
        /`{3}[^\n]*\n(-{3}\n((?!-{3}).*\n)*-{3}((?!`{3}).*\n)*)`{3}/g;
      const actionMatches = [...content.matchAll(actionRegex)];
      const actions = actionMatches.reduce((actionAcc, actionCur) => {
        const actionContent = actionCur[1];
        if (fm.test(actionContent)) {
          const action = fm(actionContent, { allowUnsafe: true });
          actionAcc.push(action);
        }
        return actionAcc;
      }, []);
      if (actions && actions.length) {
        acc.push({
          title: title.toUpperCase(),
          actions,
          fileName: file,
        });
      } else {
        throw Error(
          `Invalid step ${title}, File ${file}, Message: Missing ops`
        );
      }
    }
    return acc;
  }, []);
  return result;
}

const render = async (args, config) =>
  getFiles(args.docPath)
    .then(filter((file) => file.endsWith(".md")))
    .then(
      map((file) =>
        fs.readFile(file).then((text) => ({ file, text: text.toString() }))
      )
    )
    .then((_) => Promise.all(_))
    .then(map(({ file, text }) => renderSteps(file, text)))
    .then(filter((arr) => arr.length > 0))
    .then((arr) => arr.flat().sort((a, b) => a.title.localeCompare(b.title)));

module.exports = render;
